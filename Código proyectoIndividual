package com.mycompany.simulacion;


import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Simulacion extends JFrame {
    private DefaultTableModel tableModel;
    private JTable processTable;
    private JButton btnAgregarProceso;
    private JButton btnDetenerSimulacion;
    private List<Proceso> procesos;
    private Timer timer;

    public Simulacion() {
        setTitle("Simulaci√≥n de algoritmo shortest remaining time");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 300);
        setLocationRelativeTo(null);
        

        tableModel = new DefaultTableModel();
        tableModel.addColumn("Proceso");
        tableModel.addColumn("Tiempo Restante");
        tableModel.addColumn("Progreso");

        processTable = new JTable(tableModel);
        btnAgregarProceso = new JButton("Iniciar/Agregar");
        btnDetenerSimulacion = new JButton("Detener");
        JScrollPane scrollPane = new JScrollPane(processTable);
        
        btnAgregarProceso.setBackground(Color.orange);
        btnDetenerSimulacion.setBackground(Color.orange);

        add(scrollPane, BorderLayout.CENTER);
        add(btnAgregarProceso, BorderLayout.WEST);
        add(btnDetenerSimulacion, BorderLayout.EAST);

        btnAgregarProceso.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                agregarProcesoAleatorio();
            }
        });

        btnDetenerSimulacion.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                detenerSimulacion();
            }
        });

        procesos = new ArrayList<>();
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ejecutarProceso();
            }
        });

        timer.start();
    }

    private void agregarProcesoAleatorio() {
        Proceso nuevoProceso = Proceso.generarProcesoAleatorio();
        procesos.add(nuevoProceso);

        Object[] rowData = {nuevoProceso.nombre, nuevoProceso.tiempoRestante, "0%"};
        tableModel.addRow(rowData);
    }

    private void detenerSimulacion() {
        timer.stop();
    }

    private void ejecutarProceso() {
       if(Math.random()<0.5){
            agregarProcesoAleatorio();
        }
        if (!procesos.isEmpty()) {
            Proceso procesoActual = Collections.min(procesos, (p1, p2) -> Integer.compare(p1.tiempoRestante, p2.tiempoRestante));
            procesoActual.tiempoRestante--;

            int rowIndex = obtenerIndiceFilaPorNombre(procesoActual.nombre);
            tableModel.setValueAt(procesoActual.tiempoRestante, rowIndex, 1);

            actualizarProgreso(rowIndex, procesoActual.tiempoRestante, procesoActual.tiempoTotal);

            if (procesoActual.tiempoRestante <= 0) {
                procesos.remove(procesoActual);
                tableModel.removeRow(rowIndex);
            }
        }
    }

    private void actualizarProgreso(int rowIndex, int tiempoRestante, int tiempoTotal) {
        double progreso = 1.0 - (double) tiempoRestante / tiempoTotal;
        int porcentaje = (int) (progreso * 100);
        tableModel.setValueAt(porcentaje + "%", rowIndex, 2);
    }

    private int obtenerIndiceFilaPorNombre(String nombre) {
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getValueAt(i, 0).equals(nombre)) {
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Simulacion srtSimulacion = new Simulacion();
                srtSimulacion.setVisible(true);
            }
        });
    }
}

class Proceso {
    String nombre;
    int tiempoRestante;
    int tiempoTotal;

    private Proceso(String nombre, int tiempoTotal) {
        this.nombre = nombre;
        this.tiempoTotal = tiempoTotal;
        this.tiempoRestante = tiempoTotal;
    }

        private static int cont=1;
    static Proceso generarProcesoAleatorio() {
        String nombre = "Proceso " + cont++;
        int tiempoTotal = (int) (Math.random() * 10) + 1; // Tiempo total entre 1 y 10 segundos
        return new Proceso(nombre, tiempoTotal);
    }
}
